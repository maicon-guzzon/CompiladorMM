#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = LexicalAnalyzer
ParserName = SyntacticAnalyzer
SemanticName = SemanticAnalyzer
Package = /media/2870F51170F4E70A/Camila/Sistemas/6\u00aa
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
A : @
U : _
S : #


InteiroSemExponencial: 0 | ([1-9]{D}*)

Exponencial: (e|E)  (\+ | \-)? ({D}) {D}* 

Inteiro :  {InteiroSemExponencial}{Exponencial}?

Real: ( {InteiroSemExponencial}\.({D}*) {Exponencial}?  ) | ( (\.{D}+) {Exponencial}? )

Literal:  (') (([^"'"])* ('')* ([^"'"])*)*  (')

ComentarioLinha : (/)(/) .*

ComentarioBloco: "/*" (  [^"*"] | [ \r  \n ]  |  (  "*" +  ( [ ^"*""/"]  |  [\r \n] ) ) )* "*" + "/"

Espacos : [\ \n \r \t]


#Tokens
id : ( {L} ( ( {U}|{A}|{S} )? ({L}|{D}) )*    |    {A} ({L}|{D})+  ( ({A}|{U}|{S})?({L}|{D})+ )*) 
constanteInteira : {Inteiro} 
constanteReal: {Real} 
constanteLiteral : {Literal}
const

//palavras chave
programa = id : "programa"
var = id : "var"
caracter = id : "caracter"
inteiro = id : "inteiro"
booleano = id : "booleano"
real = id : "real"
cadeia = id : "cadeia"
vetor = id : "vetor"
proc = id : "proc"
funcao = id : "funcao"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e" 
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de" 
faca = id : "faca"
enquanto = id : "enquanto"
ref = id : "ref"
val = id : "val"
literal = id : "literal"
num_real = id : "num_real"
num_int = id : "num_int"

//sÌmbolos especiais
";"
","
"."
"<"
">"
"("
")"
"[" 
"]"
"+"
"-"
"*"
"/"
"="
":"
":="
".."
"<="
"<>"
">="
"{"
"}"


//Ignorar espaÁos em branco e comentarios
 : {Espacos}*
 : {ComentarioLinha}

//Coment√°rio n√£o fechado implicando em erro l√©xico
 :! {ComentarioBloco}
#NonTerminals
<programa>
<bloco>
<dcl_const>
<dcl_var>
<dcl_procs>
<dcl_proc>
<par_formais>
<rep_par>
<lid>
<rep_lid>
<mp_par>
<tipo>
<dimensao2> 		
<constante> 		
<tipo_pre_definido>	
<listacomando> 		
<replistacomando> 	
<comando> 			
<senaoparte> 		
<rcomid>	
<expressao2> 		
<rep_lexpr> 		
<expressao> 		
<resto_expressao> 	
<oprel> 			
<expsimp> 			
<rep_expsimp>		
<op_add> 			
<termo> 			
<rep_termo> 		
<op_mult> 			
<fator> 			
<rvar> 				
<constante_explicita>

#Grammar

<programa> ::= programa id  ";"  <bloco> "." ;

<bloco> ::= <dcl_const>  <dcl_var> <dcl_procs>  <listacomando> ;
 
<dcl_const> ::= const id "=" <constante>   ";"  <dcl_const> | Ó ;

<dcl_var> ::= var   <lid>   ":"  <tipo> ";"   <dcl_var> | Ó ;
 
<dcl_procs> ::= <dcl_proc> ";" <dcl_procs> | Ó ;

<dcl_proc> ::= proc id   <par_formais>   ";" <bloco>
	          | funcao id   <par_formais>   ":"  <tipo_pre_definido> ";"   <bloco>  ;                 

<par_formais> ::= "(" <mp_par>  <lid> ":" <tipo_pre_definido>  <rep_par>  ")"  
                           | Ó ;

<rep_par> ::= ";" <mp_par>   <lid> ":"  <tipo_pre_definido> <rep_par> | Ó ;

<lid> ::= id  <rep_lid>  ;

<rep_lid> ::= ","  <lid> | Ó ;

<mp_par>  ::= ref | val ;

<tipo> ::=   <tipo_pre_definido> 
             |  cadeia "[" <constante> "]"  
             |   vetor  "[" <constante>  ".."  <constante> <dimensao2> "]" de <tipo_pre_definido> ;


<dimensao2> ::= ","  <constante>  ".."  <constante>  |   Ó ;


<constante> ::= id  |  <constante_explicita> ;


<tipo_pre_definido> ::=  inteiro | real | booleano | caracter ;


<listacomando> ::= "{"   <comando>  <replistacomando>  "}" ;                               
<replistacomando> ::=   ";"  <comando>  <replistacomando>  |  Ó ;


<comando> ::= id <rcomid>
             |  <listacomando>                                 
             | se <expressao> entao <comando> <senaoparte> 
             | enquanto <expressao> faca <comando>                               
             | leia "(" <lid> ")"                                    
             | escreva "(" <expressao> <rep_lexpr> ")"  |  Ó ;

<senaoparte> ::= senao  <comando>  | Ó ;

<rcomid> ::= ":=" <expressao> 
                   |   "[" <expressao> <expressao2> "]" ":=" <expressao> 
                   |   "(" <expressao> <rep_lexpr> ")" 
                   |   Ó ;

<expressao2> ::= ","  <expressao>  |  Ó ;

<rep_lexpr>  ::= "," <expressao> <rep_lexpr> | Ó ;

<expressao>  ::= <expsimp> <resto_expressao> ;

<resto_expressao> ::= <oprel> <expsimp> | Ó ;

<oprel> ::= "=" | "<" | ">" | ">=" | "<=" | "<>" ;

<expsimp> ::= <termo> <rep_expsimp> ;

<rep_expsimp> ::= <op_add> <termo> <rep_expsimp> | Ó ;
                      
<op_add> ::= "+" | "-" | ou ;

<termo> ::= <fator> <rep_termo> ;

<rep_termo> ::= <op_mult> <fator> <rep_termo> | Ó ;

<op_mult> ::= "*" | "/" | e ;

<fator> ::= nao <fator> 
          
               | "-"  <fator>
    
               |  "("  <expressao> ")" 

	     | id <rvar>   

	     |  <constante_explicita> ;

<rvar> ::= "(" <expressao> <rep_lexpr> ")"  
              | "[" <expressao> <expressao2> "]"
              | Ó ;
  
<constante_explicita>::=   num_int  |  num_real 
                          |  falso  |  verdadeiro  |  literal ;

