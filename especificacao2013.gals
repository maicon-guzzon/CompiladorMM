#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = LexicalAnalyzer
ParserName = SyntacticAnalyzer
SemanticName = SemanticAnalyzer
Package = /media/2870F51170F4E70A/Camila/Sistemas/6\u00aa
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
A : @
U : _
S : #


InteiroSemExponencial: 0 | ([1-9]{D}*)

Exponencial: (e|E)  (\+ | \-)? ({D}) {D}* 

Inteiro :  {InteiroSemExponencial}{Exponencial}?

Real: ( {InteiroSemExponencial}\.({D}*) {Exponencial}?  ) | ( (\.{D}+) {Exponencial}? )

Literal:  (') (([^"'"])* ('')* ([^"'"])*)*  (')

ComentarioLinha : (/)(/) .*

ComentarioBloco: "/*" (  [^"*"] | [ \r  \n ]  |  (  "*" +  ( [ ^"*""/"]  |  [\r \n] ) ) )* "*" + "/"

Espacos : [\ \n \r \t]


#Tokens
id : ( {L} ( ( {U}|{A}|{S} )? ({L}|{D}) )*    |    {A} ({L}|{D})+  ( ({A}|{U}|{S})?({L}|{D})+ )*) 
constanteInteira : {Inteiro} 
constanteReal: {Real} 
constanteLiteral : {Literal}
const

//palavras chave
programa = id : "programa"
var = id : "var"
caracter = id : "caracter"
cadeia = id : "cadeia"
procedimento = id : "procedimento"
inicio = id : "inicio"
fim = id : "fim"
inteiro = id : "inteiro"
booleano = id : "booleano"
funcao = id : "funcao"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e" 
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de" 
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"
ref = id : "ref"
val = id : "val"
literal = id : "literal"

//sÌmbolos especiais
";"
","
"."
"<"
">"
"("
")"
"[" 
"]"
"+"
"-"
"*"
"/"
"="
":"
":="
".."
"<="
"<>"
">="


//Ignorar espaÁos em branco e comentarios
 : {Espacos}*
 : {ComentarioLinha}

//Coment√°rio n√£o fechado implicando em erro l√©xico
 :! {ComentarioBloco}
#NonTerminals
<programa>
<bloco>
<dcl_const>
<dcl_var>
<dcl_procs>
<dcl_proc>
<par_formais>
<rep_par>
<lid>
<rep_lid>
<mp_par>
<tipo>
<dimensao2> 		
<constante> 		
<tipo_pre_definido>	
<listacomando> 		
<replistacomando> 	
<comando> 			
<senaoparte> 		
<rcomid> 			
<expressao2> 		
<rep_lexpr> 		
<expressao> 		
<resto_expressao> 	
<oprel> 			
<expsimp> 			
<rep_expsimp>		
<op_add> 			
<termo> 			
<rep_termo> 		
<op_mult> 			
<fator> 			
<rvar> 				
<constante_explicita>

#Grammar
<programa> ::= programa id ";" <bloco> "." ;
<bloco> ::= <dcl_const> <dcl_var> <dcl_procs> <listacomando> ;
<dcl_const> ::= const id "=" <constante> ";" <dcl_const> | Ó ;
<dcl_var> ::= var <lid>":" <tipo> ";"<dcl_var> | Ó ;
<dcl_procs> ::= <dcl_proc> ";" <dcl_procs> | Ó ;
<dcl_proc> ::= procedimento id <par_formais>";" <bloco>| funcao id<par_formais>":" <tipo_pre_definido> ";" <bloco> ;
<par_formais> ::= "(" <mp_par> <lid> ":" <tipo_pre_definido> <rep_par> ")"| Ó ;
<rep_par> ::= ";" <mp_par><lid> ":" <tipo_pre_definido> <rep_par> | Ó ;
<lid> ::= id<rep_lid> ;
<rep_lid> ::= "," <lid> | Ó ;
<mp_par>::= ref | val ; 
<tipo> ::=<tipo_pre_definido>|cadeia "[" <constante> "]"|vetor "[" <constante> ".." <constante> <dimensao2> "]" de<tipo_pre_definido> ;
<dimensao2> ::= ","<constante> ".." <constante> | Ó ;
<constante> ::= id |<constante_explicita> ;
<tipo_pre_definido> ::= inteiro | real | booleano | caracter ;


<oprel> ::= "=" | "<" | ">" | ">=" | "<=" | "<>" ;

<constante_explicita>::= inteiro | real| falso |verdadeiro | literal ;
