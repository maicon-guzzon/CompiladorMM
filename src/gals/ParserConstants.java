package gals;

public interface ParserConstants
{
    int START_SYMBOL = 54;

    int FIRST_NON_TERMINAL    = 54;
    int FIRST_SEMANTIC_ACTION = 88;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1 },
        { -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1 },
        { -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 24, 25, 25, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 29, 26, 28, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 39, 37, 38, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 39 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, 44, -1, 43, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, 45 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, 50, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, 52, 52, -1, 51, 51, -1, 52, -1, 52, -1, -1, -1, -1, 51, -1, -1, -1, 51, 51, 51, -1, 52 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 55, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, 57, 58, 56, -1, -1 },
        { -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, 60, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, 61, 61, -1, 61, 61, -1, 61, -1, 61, 60, 60, -1, -1, 61, -1, -1, -1, 61, 61, 61, -1, 61 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 65, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, -1, -1, 67, 66, -1, -1, -1, -1, 67, -1, -1, -1, -1, 67, 67, -1, 67, 67, -1, 67, -1, 67, 67, 67, 66, 66, 67, -1, -1, -1, 67, 67, 67, -1, 67 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 74, 75, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 78, -1, -1, 78, 78, -1, -1, -1, -1, 78, -1, -1, -1, -1, 78, 78, -1, 78, 78, 76, 78, 77, 78, 78, 78, 78, 78, 78, -1, -1, -1, 78, 78, 78, -1, 78 },
        { -1, -1, 80, 83, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {  6,  2, 32, 55, 34 },
        { 56, 57, 58, 69 },
        { 31,  2, 45, 67, 32, 56 },
        {  0 },
        {  7, 62, 46, 65, 32, 57 },
        {  0 },
        { 59, 32, 58 },
        {  0 },
        { 14,  2, 60, 32, 55 },
        { 15,  2, 60, 46, 68, 32, 55 },
        { 37, 64, 62, 46, 68, 61, 38 },
        {  0 },
        { 32, 64, 62, 46, 68, 61 },
        {  0 },
        {  2, 63 },
        { 33, 62 },
        {  0 },
        { 29 },
        { 30 },
        { 68 },
        { 12, 39, 67, 40 },
        { 13, 39, 67, 48, 67, 66, 40, 26, 68 },
        { 33, 67, 48, 67 },
        {  0 },
        {  2 },
        { 87 },
        {  9 },
        { 11 },
        { 10 },
        {  8 },
        { 52, 71, 70, 53 },
        { 32, 71, 70 },
        {  0 },
        {  2, 73 },
        { 69 },
        { 16, 76, 17, 71, 72 },
        { 28, 76, 27, 71 },
        { 19, 37, 62, 38 },
        { 20, 37, 76, 75, 38 },
        {  0 },
        { 18, 71 },
        {  0 },
        { 47, 76 },
        { 39, 76, 74, 40, 47, 76 },
        { 37, 76, 75, 38 },
        {  0 },
        { 33, 76 },
        {  0 },
        { 33, 76, 75 },
        {  0 },
        { 79, 77 },
        { 78, 79 },
        {  0 },
        { 45 },
        { 35 },
        { 36 },
        { 51 },
        { 49 },
        { 50 },
        { 82, 80 },
        { 81, 82, 80 },
        {  0 },
        { 41 },
        { 42 },
        { 21 },
        { 85, 83 },
        { 84, 85, 83 },
        {  0 },
        { 43 },
        { 44 },
        { 22 },
        { 23, 85 },
        { 42, 85 },
        { 37, 76, 38 },
        {  2, 86 },
        { 87 },
        { 37, 76, 75, 38 },
        { 39, 76, 74, 40 },
        {  0 },
        {  5 },
        {  3 },
        { 24 },
        { 25 },
        {  4 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado id",
        "Era esperado num_real",
        "Era esperado literal",
        "Era esperado num_int",
        "Era esperado programa",
        "Era esperado var",
        "Era esperado caracter",
        "Era esperado inteiro",
        "Era esperado booleano",
        "Era esperado real",
        "Era esperado cadeia",
        "Era esperado vetor",
        "Era esperado proc",
        "Era esperado funcao",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado senao",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "Era esperado de",
        "Era esperado faca",
        "Era esperado enquanto",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado const",
        "Era esperado \";\"",
        "Era esperado \",\"",
        "Era esperado \".\"",
        "Era esperado \"<\"",
        "Era esperado \">\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \"=\"",
        "Era esperado \":\"",
        "Era esperado \":=\"",
        "Era esperado \"..\"",
        "Era esperado \"<=\"",
        "Era esperado \"<>\"",
        "Era esperado \">=\"",
        "Era esperado \"{\"",
        "Era esperado \"}\"",
        "<programa> inválido, era esperado 'programa'",
        "<bloco> inválido, era esperado 'var, proc, funcao, const, {'",
        "<dcl_const> inválido, era esperado 'const'",
        "<dcl_var> inválido, era esperado 'var'",
        "<dcl_procs> inválido, era esperado 'proc, funcao'",
        "<dcl_proc> inválido, era esperado 'proc, funcao'",
        "<par_formais> inválido, era esperado '('",
        "<rep_par> inválido, era esperado ';'",
        "<lid> inválido, era esperado 'id'",
        "<rep_lid> inválido, era esperado ','",
        "<mp_par> inválido, era esperado 'ref, val'",
        "<tipo> inválido, era esperado 'caracter, inteiro, booleano, real, cadeia, vetor'",
        "<dimensao2> inválido, era esperado ','s",
        "<constante> inválido, era esperado 'id, num_real, literal, num_int, falso, verdadeiro'",
        "<tipo_pre_definido> inválido, era esperado 'caracter, inteiro, booleano, real'",
        "<listacomando> inválido, era esperado '{'",
        "<replistacomando> inválido, era esperado ';'",
        "<comando> inválido, era esperado 'id, se, leia, escreva, enquanto, {'",
        "<senaoparte> inválido, era esperado 'senao'",
        "<rcomid> inválido, era esperado '(, [, :='",
        "<expressao2> inválido, era esperado ','",
        "<rep_lexpr> inválido, era esperado ','",
        "<expressao> inválido, era esperado 'id, num_real, literal, num_int, nao, falso, verdadeiro, (, -'",
        "<resto_expressao> inválido, era esperado '<, >, =, <=, <>, >='",
        "<oprel> inválido, era esperado '<, >, =, <=, <>, >='",
        "<expsimp> inválido, era esperado 'id, num_real, literal, num_int, nao, falso, verdadeiro, (, -'",
        "<rep_expsimp> inválido, era esperado 'ou, +, -'",
        "<op_add> inválido, era esperado 'ou, +, -'",
        "<termo> inválido, era esperado 'id, num_real, literal, num_int, nao, falso, verdadeiro, (, -'",
        "<rep_termo> inválido, era esperado 'e, *, /'",
        "<op_mult> inválido, era esperado '*, /'",
        "<fator> inválido, era esperado 'id, num_real, literal, num_int, nao, falso, verdadeiro, (, -''",
        "<rvar> inválido, era esperado '(, ['",
        "<constante_explicita> inválido, era esperado 'num_real, literal, num_int, falso, verdadeiro'"
    };
}
